{"version":3,"sources":["components/Todo.js","App.js","serviceWorker.js","Hello.js","components/SignUp.jsx","index.js"],"names":["t","Todo","props","handleChange","e","setState","temp","target","value","addElement","state","length","arr","action","push","alert","timeout","enabled","trash","id","undoButton","ind","setTimeout","indexOf","splice","clrtimeout","console","log","clearTimeout","type","onChange","this","placeholder","onClick","className","style","display","map","item","Component","App","Boolean","window","location","hostname","match","Hello","name","description","count","prevState","change","localStorage","removeItem","replace","user","JSON","parse","getItem","logout","SignUp","loginSubmit","event","jwt","require","f","forEach","element","decoded","verify","String","loginPassword","err","loginUserName","setItem","stringify","preventDefault","signUpSubmit","signUpPassword","signUpConfirm","signUpUserName","token","sign","signUpEmail","flag","onSubmit","required","minLength","LoginPage","SignUpPage","routing","exact","path","component","signUpPage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3753f64f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../index.css';\nvar t;\n// import { wait } from '@testing-library/react';\nclass Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { action:[], temp:'', trash:'',undoButton:'none', }\n        // this.handleadd=this.handleadd.bind(this);\n    \n    }\n    handleChange=(e)=>{\n        this.setState({\n            temp:e.target.value\n        })\n        \n    }\n    addElement=(e)=>{\n        if (this.state.temp.length>0){\n            var temp = this.state.temp;\n            var arr = this.state.action;\n            arr.push(temp)\n            this.setState({\n               action:arr,\n               temp:''\n            })\n\n        }\n        else{\n            alert('Please enter event and then submit')\n        }\n    }\n\n    timeout= (e)=>{\n        this.setState({\n            enabled:false\n        })\n        this.setState({\n            trash:e.target.id,\n            undoButton:'block'\n        })\n        var arr = this.state.action;\n        var ind= e.target.id\n       t = setTimeout(()=>{\n            ind = arr.indexOf(ind)\n            arr.splice(ind,1)\n            this.setState({\n                action:arr\n            })\n            this.setState({\n                trash:'',\n                undoButton:'none'\n            })\n        },4000)\n        \n    }\n    clrtimeout=(e)=>{\n        this.setState({\n            trash:'',\n            undoButton:'none'\n        })\n        console.log('undo',e.target.value)\n        clearTimeout(t);\n    }\n    render() { \n        return (\n            <div>\n                <input type='text' onChange={this.handleChange} value = {this.state.temp}placeholder='Enter a plan'></input>\n                <button onClick={this.addElement}>Add</button>\n                <div className='todo-container'>\n                    <h3>Your Todo List</h3>\n                    <button className=\"undoButton\" id={this.state.trash} onClick={this.clrtimeout} style={{display:this.state.undoButton}}>undo</button> \n                    {this.state.action.map((item) => (\n                        <div className='todo-element' id={item} style={{display:item!==this.state.trash ? '':'none'}}>\n                            <div className='content'>\n                                {item}\n                            </div>\n                        <button className='del-button' value='' id={item} onClick={this.timeout}>Del</button>\n                        \n                        </div>\n                    ))}\n                </div>\n                \n            </div> \n        );\n    }\n}\n \nexport default Todo;","import React from 'react';\nimport './App.css';\nimport Todo from './components/Todo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Todo></Todo>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nclass Hello extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            name : 'Cyber',\n            description:'Hacker',\n            count:0\n        }\n    }\n    change() {\n        this.setState((prevState)=>({\n            count: prevState.count+1\n        }));\n    }\n    change3(){\n        this.change();\n        this.change();\n        this.change();\n    }\n    logout(){\n        localStorage.removeItem('current')\n        window.location.replace('/signup')\n    }\n    render(){\n        var user = JSON.parse(localStorage.getItem('current'))\n        if (user!=null){\n            return (\n                <>\n            <h1>Hello {user[0]}</h1>\n            <p>Your email: {user[2]}</p>\n            <button onClick={this.logout}>logout</button>\n                </>\n            )\n        }\n        else{\n            return(\n                <h1>Access Denied</h1>\n            )\n        }\n    }\n}\nexport default Hello;","import React,{Component} from 'react'\nimport '../signup.css'\n// import Hello from '../Hello'\n\nclass SignUp extends Component {\n    constructor(){\n        super()\n        this.state=({\n            loginUserName:'',\n            loginPassword:'',\n            signUpUserName:'',\n            signUpEmail:'',\n            signUpPassword:'',\n            signUpConfirm:'',\n            flag:true\n        })\n    }\n\n    handleChange=(e)=>{\n        this.setState({\n            [e.target.id]:e.target.value\n        })\n\n    }\n    LoginPage(){\n        return(\n            <div className='login-form'  id='login-form'>\n                <h2>Login</h2>\n                <form className='login-form' onSubmit={this.loginSubmit}>\n                    <div>\n                        <label>UserName</label>\n                        <input type=\"text\" placeholder=\"User Name\" id='loginUserName' value={this.state.loginUserName} onChange={this.handleChange} required/>\n                    </div>\n                    <div>\n                        <label>Password</label>\n                        <input type=\"password\" placeholder=\"password\" id='loginPassword' value={this.state.loginPassword} onChange={this.handleChange} required/>\n                    </div>\n                    <input className='submit-button' type=\"submit\" value=\"Login\"/>\n                </form>\n                \n            </div>\n        )\n    }\n    loginSubmit = event =>{\n        var jwt = require('jsonwebtoken');\n        var temp = JSON.parse(localStorage.getItem('credentials'))\n\n        var f=null\n        temp.forEach(element => {\n            try{\n                var decoded = jwt.verify(String(element[1]), String(this.state.loginPassword))\n            }\n            catch(err){\n                decoded ={user:'none'}\n            }\n            if(this.state.loginUserName===decoded.user && element[0]===decoded.user){\n                f=element\n                localStorage.setItem('current',JSON.stringify(f));\n                \n            } \n        });\n        if(f){\n            window.location.replace('/hello')\n            \n            event.preventDefault()\n        }\n        else{\n            alert('invalid credentials')\n        }\n\n    }\n\n    \n    signUpSubmit = event =>{\n        var jwt = require('jsonwebtoken');\n        var f=0;\n        if(localStorage.getItem('credentials')==null){\n            localStorage.setItem('credentials',JSON.stringify([]))\n        }\n        var temp = JSON.parse(localStorage.getItem('credentials'))\n        if(this.state.signUpPassword === this.state.signUpConfirm){\n            temp.forEach(element => {\n                if (element[0] === this.state.signUpUserName){\n                    f=1;\n                }\n            });\n            if (!f){\n                var token = jwt.sign({ user:this.state.signUpUserName }, this.state.signUpPassword);\n                temp.push([this.state.signUpUserName,token,this.state.signUpEmail])\n                localStorage.setItem('credentials',JSON.stringify(temp))\n                alert('SignUp Successfull')\n            }\n            else{\n                alert('username already taken')\n            }\n        }\n        else{\n            alert('Password dosent match')\n        }\n    }\n\n    SignUpPage(){\n        return (\n            <div className='login-form' id='signup-form'>\n                <h2>Sign Up</h2>\n                <form className='login-form' onSubmit={this.signUpSubmit} >\n                    <div>\n                        <label>UserName</label>\n                        <input type=\"text\" placeholder=\"User Name\" id='signUpUserName' minLength='3' value={this.state.signUpUserName} onChange={this.handleChange} required/>\n                    </div>\n                    <div>\n                        <label>E-mail</label>\n                        <input type=\"email\" placeholder=\"E-mail\" id='signUpEmail' value={this.state.signUpEmail} onChange={this.handleChange} required/>\n                    </div>\n                    <div>\n                        <label>Password</label>\n                        <input type=\"password\" placeholder=\"password\" id='signUpPassword' minLength='3' value={this.state.signUpPassword} onChange={this.handleChange} required/>\n                    </div>\n                    <div>\n                        <label>confirm Password</label>\n                        <input type=\"password\" placeholder=\"password\" id='signUpConfirm' minLength='3' value={this.state.signUpConfirm} onChange={this.handleChange} required/>\n                    </div>\n                    <input className=\"submit-button\" type=\"submit\" value='SignUp'/>\n                </form>\n                \n            </div>\n        )\n    }\n\n\n    render() { \n        return ( \n            <div className='form-container'>\n            <h1>React Loginpage</h1>\n            <div className='select'>\n                <button id='switch-login' onClick={()=>{this.setState({flag:true})}}>Log in</button>\n                <button id='switch-signup' onClick={()=> {this.setState({flag:false})}}>Sign UP</button>\n            </div>\n                {this.state.flag ? this.LoginPage():this.SignUpPage()}\n        </div>\n         );\n    }\n}\n \nexport default SignUp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Link, BrowserRouter as Router, Switch } from 'react-router-dom'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Hello from './Hello'\nimport signUpPage from './components/SignUp'\n\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nconst routing = (\n    <Router>\n            <Switch>\n                <Route exact path='/' component={App}></Route>\n                <Route path='/Hello' component={Hello}></Route>\n                <Route path='/signup' component={signUpPage}></Route>\n                <Route component={()=><h1>404 Not Found</h1>}></Route>\n            </Switch>\n    </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}